
//default_print_template({?lines}) :-
//   FINDALL(ast_symbol(?x),{ast_default_print(?x,"?x(",",",")").
//},?lines).
//
//:- default_print_template(?copy_paste).

ast_custom_print (CompoundTerm,{
        int size = size();
        if (size==0) 
            ostr.print("<>");
        else {
        	get(0).print(ostr);
        	ostr.print("<");
        	for (int i=1;i<size;i++) {
        	    if (i>1)
        	        ostr.print(",");
        	    get(i).print(ostr);
        	}
        	ostr.print(">");
        }}).

ast_default_print(Not,            "NOT(",            ",",  ")" ).
ast_default_print(Conjunction,    "AND(",            ",",  ")" ).
ast_default_print(Disjunction,    "OR(",             ",",  ")" ).

ast_default_print(CompilationUnit,"MODULE ",      "\\n", "\\nEND." ).

ast_default_print(Assertions,     "",                "\\n", ""  ).
ast_default_print(Fact,           "",                ":-", "." ).
ast_default_print(Rule,           "",                ":-", "." ).
ast_default_print(Query,          ":-",              "",   "." ).
ast_default_print(Include,        "#include ",       "",   "").

ast_string_print(IgnoredVariable, "?").

ast_wrapped_print(TermExpression).

ast_list_print(List,           "[",   ",",  "|",  "]" ).
